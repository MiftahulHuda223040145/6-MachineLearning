# -*- coding: utf-8 -*-
"""visualisasi-naivebayes-weather

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DMxuwj071fL2tXSX0KNyvs-gFschOCk1
"""

import pandas as pd
from sklearn.naive_bayes import CategoricalNB

from google.colab import files
uploaded = files.upload()  # Ini akan membuka jendela unggahan file

# Dapatkan nama file yang diunggah (mengambil kunci dari dictionary `uploaded`)
file_name = list(uploaded.keys())[0]

# Membaca Excel  ke dalam DataFrame
df = pd.read_excel(file_name)

# Menampilkan beberapa baris pertama untuk memverifikasi data
print(df.head())

print("\nðŸ“Œ Frekuensi & Probabilitas per Kolom:\n")
target_col = 'Class'  # Kolom target
kelas_target = df[target_col].unique()

print("\nðŸ“Œ Frekuensi & Probabilitas per Kolom, dipisah berdasarkan kelas target:\n")

for col in df.columns:
    if col == target_col:
        continue  # Lewati kolom target itu sendiri

    print(f"\nðŸ”¹ Kolom: {col}")
    for k in sorted(kelas_target):
        subset = df[df[target_col] == k]
        frekuensi = subset[col].value_counts().sort_index()
        probabilitas = subset[col].value_counts(normalize=True).sort_index()

        print(f"\n  ðŸ‘‰ Untuk kelas target: {k} ({'play' if k == 1 else 'dont play'})")
        summary = pd.DataFrame({
            'Frekuensi': frekuensi,
            'Probabilitas': probabilitas.round(4)
        })
        print(summary)

    print("-" * 50)

# Pisahkan fitur dan target
X = df[['Outlook', 'Humidity', 'Windy']]
y = df['Class']
model = CategoricalNB(alpha=0.1)  # Laplace smoothing
model.fit(X, y)
# Contoh input: Outlook = 2 (rain), Humidity = 3 (tinggi), Windy = 1 (True)
input_data = [[2, 3, 1]]  # Harus dalam bentuk 2D array

# Prediksi kelas (0 atau 1)
hasil_prediksi = model.predict(input_data)

# Prediksi probabilitas tiap kelas
probabilitas = model.predict_proba(input_data)
print("Keputusan Model:", "play" if hasil_prediksi[0] == 1 else "don't play")
print("Probabilitas Play:", round(probabilitas[0][1]*100, 2), "%")
print("Probabilitas Don't Play:", round(probabilitas[0][0]*100, 2), "%")