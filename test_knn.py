# -*- coding: utf-8 -*-
"""Test KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HzBmwwJ5pWo0cVvB5D7V02Ypk2gStDCo
"""

import pandas as pd
from pandas import ExcelFile
import numpy as np
from IPython import display

train = np.array([['Kehadiran Kuliah','Kedisiplinan','IPK','Lama Studi'],
             [90, 9, 3.5, 'Tepat'],
             [80, 8, 3.2, 'Tepat'],
             [70, 7, 3.0, 'Tepat'],
             [95, 9, 3.7,'Tepat'],
             [85, 8, 3.3,'Tepat'],
             [75, 6, 2.8,'Sedang'],
             [60, 5, 2.5,'Sedang'],
             [65, 6, 2.6,'Sedang'],
             [50, 4, 2.0,'Sedang'],
             [55, 5, 2.2,'Sedang'],
             [40, 3, 1.8,'Lambat'],
             [30, 2, 1.5,'Lambat'],
             [45, 4, 1.9,'Lambat'],
             [35, 3, 1.6,'Lambat'],
             [25,2, 1.3,'Lambat']])

df = pd.read_csv("/klusterKapasitasPuskesmas1.csv")

df.head()

train

train=pd.DataFrame(train)

"""Tambahkan Penjelasan untuk instruksi diatas"""

train

train.columns=train.iloc[0]

train.columns

train.drop(0,inplace=True)

"""Fungsi 2 instruksi diatas"""

train

jkdummies=pd.get_dummies(train['Lama Studi'])

"""fungsi satu instruksi diatas ini adalah"""

# # Buat mapping
# mapping = {'Tepat': 0, 'Sedang': 1, 'Terlambat': 2}

jkdummies

train['Lama Studi']=jkdummies['Tepat']

train

train=train.astype('int')

train

"""# Training

## Masalah Klasifikasi
"""

X_train_klasif = train.drop('Lama Studi',axis=1)
y_train_klasif = train['Lama Studi']

from sklearn.neighbors import KNeighborsClassifier

K=3;
knn_klasif = KNeighborsClassifier(n_neighbors=K);
knn_klasif.fit(X_train_klasif,y_train_klasif);

"""## Masalah Regresi"""

X_train_regres = train.drop('berat',axis=1)
y_train_regres = train['berat']

X_train_regres

y_train_regres

from sklearn.neighbors import KNeighborsRegressor

K=3
knn_regres = KNeighborsRegressor(n_neighbors=K);
knn_regres.fit(X_train_regres,y_train_regres);

"""# Testing"""

test=pd.DataFrame(np.array([['Kehadiran Kuliah','Kedisiplinan','IPK','Lama Studi'],
             [90, 9, 3.5, 'Tepat'],
             [80, 8, 3.2, 'Tepat'],
             [70, 7, 3.0, 'Tepat'],
             [95, 9, 3.7,'Tepat'],
             [85, 8, 3.3,'Tepat'],
             [75, 6, 2.8,'Sedang'],
             [60, 5, 2.5,'Sedang'],
             [65, 6, 2.6,'Sedang'],
             [50, 4, 2.0,'Sedang'],
             [55, 5, 2.2,'Sedang'],
             [40, 3, 1.8,'Lambat'],
             [30, 2, 1.5,'Lambat'],
             [45, 4, 1.9,'Lambat'],
             [35, 3, 1.6,'Lambat'],
             [25,2, 1.3,'Lambat']]))

test.iloc[0]

test=pd.DataFrame(test)

test

test.columns=test.iloc[0]
test.drop(0,inplace=True)
testdummy=pd.get_dummies(test['Lama Studi'])

testdummy

test['Lama Studi']=testdummy['Tepat']
test=test.astype('int')

"""## Masalah Klasifikasi"""

X_test_klasif = test.drop('Lama Studi',axis=1)
y_test_klasif = test['Lama Studi']

y_pred_klasif = knn_klasif.predict(X_test_klasif)

from sklearn.metrics import classification_report

classification_report(y_test_klasif,y_pred_klasif)

"""### Matthew Correlation Coefficient"""

from sklearn.metrics import matthews_corrcoef

mcc = matthews_corrcoef(y_test_klasif,y_pred_klasif)

print(f'MCC:{mcc}')

import pandas as pd
import numpy as np

# --- 1. Mendefinisikan Data Latih ---
# Berdasarkan tabel di sisi kiri gambar
data_latih = {
    'No.': [15, 12, 14, 11, 13, 9, 10, 7, 8, 3, 6, 2, 5, 1, 4],
    'Kehadiran Kuliah': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95],
    'Kedisiplinan Tugas': [2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 6, 8, 8, 9, 9],
    'IPK': [1.3, 1.5, 1.6, 1.8, 1.9, 2.0, 2.2, 2.5, 2.6, 3.0, 2.8, 3.2, 3.3, 3.5, 3.7],
    'Lama Studi': ['Lambat', 'Lambat', 'Lambat', 'Lambat', 'Lambat', 'Sedang', 'Sedang', 'Sedang', 'Sedang', 'Tepat', 'Sedang', 'Tepat', 'Tepat', 'Tepat', 'Tepat']
}
df_latih = pd.DataFrame(data_latih)

# Menggunakan kolom fitur untuk perhitungan jarak
features = ['Kehadiran Kuliah', 'Kedisiplinan Tugas', 'IPK']
X_train = df_latih[features].values
y_train = df_latih['Lama Studi'].values
id_train = df_latih['No.'].values # Menyimpan nomor asli untuk identifikasi

# --- 2. Mendefinisikan Data Query ---
# Berdasarkan bagian 'Query' di gambar
query_data = np.array([6, 4, 3.3])

# --- 3. Menghitung Jarak (Euclidean Distance) ---
# Menggunakan Euclidean distance kuadrat seperti yang disiratkan oleh kolom "Distance"
# Anda bisa menggunakan np.linalg.norm untuk Euclidean distance biasa, lalu kuadratkan
# Atau langsung (A-B)^2
distances_sq = np.sum((X_train - query_data)**2, axis=1)

# Buat DataFrame untuk menampilkan hasil jarak seperti di gambar
df_jarak = pd.DataFrame({
    'Kehadiran Kuliah': X_train[:, 0],
    'Kedisiplinan Tugas': X_train[:, 1],
    'IPK': X_train[:, 2],
    'Distance': distances_sq # Ini adalah jarak kuadrat, sama seperti kolom di gambar
})

# --- 4. Menggabungkan informasi jarak dengan data latih dan mengurutkan ---
df_jarak['Lama Studi'] = y_train
df_jarak['No.'] = id_train
df_jarak_sorted = df_jarak.sort_values(by='Distance').reset_index(drop=True)

print("--- Data dengan Jarak dan Diurutkan ---")
print(df_jarak_sorted[['No.', 'Kehadiran Kuliah', 'Kedisiplinan Tugas', 'IPK', 'Distance', 'Lama Studi']])
print("\n" + "="*50 + "\n")

# --- 5. Memilih K tetangga terdekat ---
K = 6 # Berdasarkan K=6 di gambar
k_nearest_neighbors = df_jarak_sorted.head(K)

print(f"--- {K} Tetangga Terdekat ---")
print(k_nearest_neighbors[['No.', 'Lama Studi', 'Distance']])

# Mengambil 'No.' dari K tetangga terdekat
nearest_neighbor_nos = tuple(k_nearest_neighbors['No.'].tolist())
print(f"\nNo. Tetangga Terdekat (K={K}): {nearest_neighbor_nos}")

# --- 6. Menentukan Kelas dari K tetangga terdekat ---
# Menghitung frekuensi masing-masing kelas dari tetangga terdekat
class_counts = k_nearest_neighbors['Lama Studi'].value_counts()

# Menampilkan hasil klasifikasi akhir
# Pastikan semua kategori ada, bahkan jika jumlahnya 0, seperti di gambar
final_tepat = class_counts.get('Tepat', 0)
final_sedang = class_counts.get('Sedang', 0)
final_lambat = class_counts.get('Lambat', 0)

print(f"\n--- Hasil Klasifikasi KNN (K={K}) ---")
print(f"Tepat = {final_tepat}")
print(f"Sedang = {final_sedang}")
print(f"Lambat = {final_lambat}")

# Menentukan kelas hasil prediksi (yang paling sering muncul)
predicted_class = class_counts.idxmax() if not class_counts.empty else "Tidak Ada Data"
print(f"\nKelas Prediksi: {predicted_class}")

"""## Masalah Regresi"""

X_test_regres = test.drop('berat',axis=1)
y_test_regres = test['berat']

y_pred_regres = knn_regres.predict(X_test_regres)

"""### Coefficient of Determination or R<sup>2</sup>"""

from sklearn.metrics import r2_score

r_squared = r2_score(y_test_regres,y_pred_regres)

print(f'R-squared: {r_squared}')

"""### Mean Absolute Error"""

from sklearn.metrics import mean_absolute_error

mae = mean_absolute_error(y_test_regres,y_pred_regres)

print(f'MAE: {mae}')

"""### Mean Squared Error"""

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test_regres,y_pred_regres)

print(f'MSE: {mse}')

"""# Feature Scaling: Standardization"""

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

X_train_regres

X_test_regres

"""### Feature Scaling:Standardization"""

X_train_regres_standardized = ss.fit_transform(X_train_regres)
X_test_regres_standardized = ss.transform(X_test_regres)

X_train_regres_standardized

X_test_regres_standardized

knn_regres.fit(X_train_regres_standardized,y_train_regres)
y_pred_regres_standardized = knn_regres.predict(X_test_regres_standardized)

mae_standardized = mean_absolute_error(y_test_regres,y_pred_regres_standardized)
mse_standardized = mean_squared_error(y_test_regres,y_pred_regres_standardized)

print(f'MAE: {mae_standardized}')
print(f'MSE: {mse_standardized}')